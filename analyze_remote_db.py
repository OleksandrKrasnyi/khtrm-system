#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö saltdepoavt_
–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª–µ–π "–ü. –≤—ñ–¥" –∏ "–ö. –≤—ñ–¥"
"""

import json
import os
from datetime import datetime

import mysql.connector
from dotenv import load_dotenv
from mysql.connector import Error


def analyze_remote_database() -> None:
    """–ê–Ω–∞–ª–∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
    load_dotenv()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ .env
    mysql_port = os.getenv("MYSQL_PORT", "3306")
    config = {
        "host": os.getenv("MYSQL_HOST"),
        "port": int(mysql_port),
        "database": os.getenv("MYSQL_DATABASE"),
        "user": os.getenv("MYSQL_USER"),
        "password": os.getenv("MYSQL_PASSWORD"),
        "charset": "utf8mb4",
        "use_unicode": True,
        "autocommit": True,
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = ["MYSQL_HOST", "MYSQL_USER", "MYSQL_PASSWORD", "MYSQL_DATABASE"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]

    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env: {', '.join(missing_vars)}")
        return

    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {config['host']}:{config['port']}/{config['database']}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {config['user']}")

    print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö saltdepoavt_")
    print("=" * 60)

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(**config)
        cursor = connection.cursor()

        # 1. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        print("üìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        cursor.execute("SHOW TABLES")
        tables = [table[0] for table in cursor.fetchall()]

        for i, table in enumerate(tables, 1):
            print(f"{i:2d}. {table}")

        print(f"\n–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        print("=" * 60)

        # 2. –ù–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–ª—è–º–∏ –≤—Ä–µ–º–µ–Ω–∏/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        relevant_tables = []
        time_fields = ["time", "trab", "norma", "plan", "profit", "vih", "zah"]

        print("üïê –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å –ø–æ–ª—è–º–∏ –≤—Ä–µ–º–µ–Ω–∏:")

        for table in tables:
            try:
                cursor.execute(f"DESCRIBE {table}")
                fields = cursor.fetchall()

                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏
                time_related_fields = []
                for field in fields:
                    field_name = str(field[0]).lower()
                    if any(keyword in field_name for keyword in time_fields):
                        time_related_fields.append(field[0])

                if time_related_fields:
                    relevant_tables.append(
                        {
                            "table": table,
                            "time_fields": time_related_fields,
                            "total_fields": len(fields),
                        }
                    )
                    print(
                        f"  ‚úì {table}: {', '.join(time_related_fields[:5])}{'...' if len(time_related_fields) > 5 else ''}"
                    )

            except Error as e:
                print(f"  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {table}: {e}")

        print("=" * 60)

        # 3. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ relev–∞–Ω—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        print("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:")

        analysis_results = {}

        for table_info in relevant_tables[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º 5 —Ç–∞–±–ª–∏—Ü–∞–º–∏
            table = table_info["table"]
            print(f"\nüîé –¢–∞–±–ª–∏—Ü–∞: {table}")

            try:
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute(f"DESCRIBE {table}")
                fields = cursor.fetchall()

                print(f"  –ü–æ–ª–µ–π: {len(fields)}")

                # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                profit_fields = []
                time_fields = []

                for field in fields:
                    field_name = str(field[0])
                    field_type = str(field[1])

                    if any(
                        keyword in field_name.lower()
                        for keyword in ["profit", "trab", "norma"]
                    ):
                        profit_fields.append(f"{field_name} ({field_type})")
                    elif any(
                        keyword in field_name.lower()
                        for keyword in ["time", "vih", "zah", "pods", "zakls"]
                    ):
                        time_fields.append(f"{field_name} ({field_type})")

                if profit_fields:
                    print(f"  üí∞ –ü–æ–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏: {', '.join(profit_fields)}")
                if time_fields:
                    print(
                        f"  ‚è∞ –ü–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏: {', '.join(time_fields[:10])}{'...' if len(time_fields) > 10 else ''}"
                    )

                # –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                cursor.execute(f"SELECT * FROM {table} LIMIT 3")
                sample_data = cursor.fetchall()

                if sample_data:
                    print(f"  üìÑ –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö ({len(sample_data)} –∑–∞–ø–∏—Å–µ–π):")
                    column_names = [desc[0] for desc in cursor.description]

                    for i, row in enumerate(sample_data):
                        print(f"    –ó–∞–ø–∏—Å—å {i + 1}:")
                        for j, value in enumerate(row):
                            if j < 10:  # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª–µ–π
                                print(f"      {column_names[j]}: {value}")
                        if len(row) > 10:
                            print(f"      ... (–µ—â–µ {len(row) - 10} –ø–æ–ª–µ–π)")

                analysis_results[table] = {
                    "fields_count": len(fields),
                    "profit_fields": profit_fields,
                    "time_fields": time_fields,
                    "sample_count": len(sample_data),
                }

            except Error as e:
                print(f"  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {table}: {e}")

        print("=" * 60)

        # 4. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 2025-07-07
        print("üéØ –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ 2025-07-07 –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö:")

        main_tables = ["zanaradka", "tabel", "tabel_plan_norma", "tabel_plan"]

        for table in main_tables:
            if table in tables:
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                    date_fields = ["data_day", "date", "data"]
                    date_field = None

                    cursor.execute(f"DESCRIBE {table}")
                    fields = cursor.fetchall()

                    for field in fields:
                        if str(field[0]).lower() in date_fields:
                            date_field = field[0]
                            break

                    if date_field:
                        cursor.execute(
                            f"SELECT COUNT(*) FROM {table} WHERE {date_field} = '2025-07-07'"
                        )
                        count = cursor.fetchone()[0]
                        print(f"  üìÖ {table}: {count} –∑–∞–ø–∏—Å–µ–π –Ω–∞ 2025-07-07")

                        if count > 0:
                            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏
                            time_fields_query = []
                            for field in fields:
                                if any(
                                    keyword in str(field[0]).lower()
                                    for keyword in [
                                        "time",
                                        "trab",
                                        "norma",
                                        "vih",
                                        "zah",
                                    ]
                                ):
                                    time_fields_query.append(field[0])

                            if time_fields_query:
                                fields_str = ", ".join(time_fields_query[:10])
                                cursor.execute(
                                    f"SELECT {fields_str} FROM {table} WHERE {date_field} = '2025-07-07' LIMIT 3"
                                )
                                sample = cursor.fetchall()

                                print(
                                    f"    –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏: {', '.join(time_fields_query[:10])}"
                                )
                                for i, row in enumerate(sample):
                                    print(f"    –ó–∞–ø–∏—Å—å {i + 1}: {row}")

                except Error as e:
                    print(f"  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {table}: {e}")

        # 5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        results = {
            "timestamp": datetime.now().isoformat(),
            "total_tables": len(tables),
            "tables_list": tables,
            "relevant_tables": relevant_tables,
            "analysis_results": analysis_results,
        }

        with open("db_analysis_results.json", "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=2, default=str)

        print("=" * 60)
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ db_analysis_results.json")

    except Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞:")
        print("  - host: –∞–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
        print("  - user: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("  - password: –ø–∞—Ä–æ–ª—å")
        print("  - database: saltdepoavt_")

    finally:
        if "connection" in locals() and connection.is_connected():
            cursor.close()
            connection.close()
            print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    analyze_remote_database()
