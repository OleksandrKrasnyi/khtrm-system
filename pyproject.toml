[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "khtrm-system"
version = "0.1.0"
description = "KHTRM System - Kharkiv Transport Resource Management"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "KHTRM Team", email = "admin@khtrm-system.com"},
]
keywords = ["khtrm", "transport", "fleet", "management", "fastapi", "vue"]
dependencies = [
    "fastapi>=0.116.0",
    "uvicorn[standard]>=0.35.0",
    "sqlalchemy>=2.0.41",
    "alembic>=1.16.2",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "python-jose[cryptography]>=3.5.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.20",
    "pymysql>=1.1.1",
    "cryptography>=45.0.5",
    "python-dotenv>=1.1.1",
    "aiosqlite>=0.21.0",
    "httpx>=0.28.1",
    "paramiko>=3.5.1",
    "mysql-connector-python>=9.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "ruff>=0.1.6",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
]

[project.urls]
Homepage = "https://github.com/khtrm-system/khtrm-system"
Repository = "https://github.com/khtrm-system/khtrm-system.git"
Documentation = "https://khtrm-system.readthedocs.io"
"Bug Tracker" = "https://github.com/khtrm-system/khtrm-system/issues"

[tool.hatch.build.targets.wheel]
packages = ["backend"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "Q",  # flake8-quotes
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"backend/app/models/*.py" = ["E501"]

[tool.black]
target-version = ["py311"]
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "passlib.*",
    "jose.*",
    "pymysql.*",
    "alembic.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 

[dependency-groups]
dev = [
    "mypy>=1.16.1",
    "ruff>=0.12.2",
]
