#!/usr/bin/env python3
"""
Enhanced Database Analysis Tool
–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import json
import os
from datetime import datetime
from typing import Any

import mysql.connector
from mysql.connector import Error


class DatabaseAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.config = {
            "host": "91.222.248.216",
            "port": 61315,
            "user": "khtrm_remote",
            "password": "KhTRM_2025!",
            "database": "saltdepoavt_",
            "charset": "utf8mb4",
            "use_unicode": True,
            "autocommit": True,
        }
        self.connection = None
        self.cursor = None

    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = mysql.connector.connect(**self.config)
            self.cursor = self.connection.cursor(dictionary=True)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return True
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
        print("üìù –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

    def get_table_structure(self, table_name: str) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
            self.cursor.execute(f"DESCRIBE {table_name}")
            structure = self.cursor.fetchall()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
            self.cursor.execute(f"""
                SELECT
                    COLUMN_NAME,
                    DATA_TYPE,
                    IS_NULLABLE,
                    COLUMN_DEFAULT,
                    COLUMN_TYPE,
                    COLUMN_COMMENT
                FROM information_schema.COLUMNS
                WHERE TABLE_SCHEMA = '{self.config["database"]}'
                AND TABLE_NAME = '{table_name}'
                ORDER BY ORDINAL_POSITION
            """)
            detailed_structure = self.cursor.fetchall()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
            self.cursor.execute(f"SHOW INDEX FROM {table_name}")
            indexes = self.cursor.fetchall()

            # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π
            self.cursor.execute(f"SELECT COUNT(*) as count FROM {table_name}")
            count_result = self.cursor.fetchone()
            row_count = count_result["count"] if count_result else 0

            return {
                "structure": structure,
                "detailed_structure": detailed_structure,
                "indexes": indexes,
                "row_count": row_count,
            }

        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            return {}

    def get_field_values(
        self, table_name: str, field_name: str, limit: int = 20
    ) -> list[dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—è"""
        try:
            # –î–ª—è –ø–æ–ª—è —Å —Å–∏–º–≤–æ–ª–æ–º ‚Ññ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            field_query = f"`{field_name}`" if "‚Ññ" in field_name else field_name

            query = f"""
                SELECT DISTINCT {field_query} as value, COUNT(*) as count
                FROM {table_name}
                WHERE {field_query} IS NOT NULL
                AND {field_query} != ''
                GROUP BY {field_query}
                ORDER BY count DESC, {field_query} ASC
                LIMIT {limit}
            """

            self.cursor.execute(query)
            return self.cursor.fetchall()

        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—è {field_name}: {e}")
            return []

    def get_sample_data(
        self, table_name: str, date_filter: str = None, limit: int = 10
    ) -> list[dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if date_filter:
                query = f"""
                    SELECT * FROM {table_name}
                    WHERE data_day = '{date_filter}'
                    ORDER BY marshrut, smena
                    LIMIT {limit}
                """
            else:
                query = f"""
                    SELECT * FROM {table_name}
                    ORDER BY `key` DESC
                    LIMIT {limit}
                """

            self.cursor.execute(query)
            return self.cursor.fetchall()

        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []

    def analyze_zanaradka_table(self) -> dict[str, Any]:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã zanaradka"""
        print("üìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã zanaradka...")

        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        structure_info = self.get_table_structure("zanaradka")

        # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        key_fields = [
            "marshrut",
            "vipusk",
            "smena",
            "tabvoditel",
            "fiovoditel",
            "tabconduktor",
            "fioconduktor",
            "pe‚Ññ",
            "data_day",
            "tvih",
            "tzah",
            "putlist‚Ññ",
        ]

        # –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π
        field_analysis = {}
        for field in key_fields:
            print(f"   –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—è: {field}")
            field_analysis[field] = self.get_field_values("zanaradka", field)

        # –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        sample_data = self.get_sample_data("zanaradka", limit=5)

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
        date_specific_data = self.get_sample_data("zanaradka", "2025-07-07", limit=10)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–µ
        try:
            self.cursor.execute("""
                SELECT
                    data_day,
                    COUNT(*) as assignments_count,
                    COUNT(DISTINCT marshrut) as routes_count,
                    COUNT(DISTINCT smena) as shifts_count
                FROM zanaradka
                WHERE data_day >= '2025-07-01'
                GROUP BY data_day
                ORDER BY data_day DESC
                LIMIT 10
            """)
            date_statistics = self.cursor.fetchall()
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞—Ç–∞–º: {e}")
            date_statistics = []

        return {
            "structure": structure_info,
            "field_analysis": field_analysis,
            "sample_data": sample_data,
            "date_specific_data": date_specific_data,
            "date_statistics": date_statistics,
        }

    def analyze_related_tables(self) -> dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        print("üìä –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")

        related_tables = ["sprmarshrut", "sprpersonal", "sprpe"]
        analysis = {}

        for table in related_tables:
            print(f"   –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table}")
            try:
                structure = self.get_table_structure(table)
                sample_data = self.get_sample_data(table, limit=5)

                analysis[table] = {"structure": structure, "sample_data": sample_data}
            except Error as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
                analysis[table] = {"error": str(e)}

        return analysis

    def create_field_mapping(self) -> dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π –º–µ–∂–¥—É –ë–î –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π...")

        # –¢–µ–∫—É—â–∏–µ –ø–æ–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        web_fields = {
            "simple": [
                "route_number",
                "shift",
                "driver_name",
                "vehicle_number",
                "departure_time",
                "arrival_time",
                "status",
            ],
            "extended": [
                "route_number",
                "brigade",
                "shift",
                "driver_tab_number",
                "driver_name",
                "conductor_name",
                "vehicle_number",
                "state_number_pc",
                "departure_time",
                "arrival_time",
                "waybill_number",
                "fuel_address",
                "route_endpoint",
                "status",
            ],
        }

        # –ö–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª–µ–π –ë–î –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        field_mapping = {
            "key": "id",
            "data_day": "assignment_date",
            "marshrut": "route_number",
            "vipusk": "brigade",
            "smena": "shift",
            "tabvoditel": "driver_tab_number",
            "fiovoditel": "driver_name",
            "tabconduktor": "conductor_tab_number",
            "fioconduktor": "conductor_name",
            "pe‚Ññ": "vehicle_number",
            "tvih": "departure_time",
            "tzah": "arrival_time",
            "putlist‚Ññ": "waybill_number",
            "ZaprAdr": "fuel_address",
            "kpvih": "route_endpoint",
            "tipvipusk": "route_type",
        }

        return {
            "web_fields": web_fields,
            "field_mapping": field_mapping,
            "database_fields": list(field_mapping.keys()),
            "web_interface_fields": list(field_mapping.values()),
        }

    def generate_improvement_recommendations(
        self, analysis_data: dict[str, Any]
    ) -> list[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        recommendations = []

        # –ü—Ä–æ–±–ª–µ–º—ã —Å Simple View
        recommendations.append(
            "üîß Simple View: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –ø–æ–ª–µ–π"
        )
        recommendations.append(
            "üìù Simple View: –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç, —Å–º–µ–Ω—É, –Ω–æ–º–µ—Ä –ü–°, –≤—Ä–µ–º–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞/–∑–∞—Ö–æ–¥–∞"
        )

        # –ü—Ä–æ–±–ª–µ–º—ã —Å –º–∞–ø–ø–∏–Ω–≥–æ–º –ø–æ–ª–µ–π
        recommendations.append(
            "üîß Backend: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ 'putlist???' –Ω–∞ 'pe‚Ññ' –¥–ª—è –Ω–æ–º–µ—Ä–∞ –ü–°"
        )
        recommendations.append(
            "üîß Backend: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ 'putlist???' –Ω–∞ 'putlist‚Ññ' –¥–ª—è –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞"
        )

        # –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        recommendations.append(
            "üîß Encoding: –£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏–º–µ–Ω–∞—Ö"
        )

        # –ü—Ä–æ–±–ª–µ–º—ã —Å Extended View
        recommendations.append(
            "üìù Extended View: –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –∞–Ω–∞–ª–∏–∑—É –ë–î"
        )

        # –ü—Ä–æ–±–ª–µ–º—ã —Å Full View
        recommendations.append(
            "üìù Full View: –ü—Ä–∏–≤–µ—Å—Ç–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π MS Access"
        )

        return recommendations

    def save_analysis_results(
        self, analysis_data: dict[str, Any], output_dir: str = "python_db_analysis"
    ):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞–ø–∫—É: {output_dir}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        with open(
            os.path.join(output_dir, "full_analysis.json"), "w", encoding="utf-8"
        ) as f:
            json.dump(analysis_data, f, ensure_ascii=False, indent=2, default=str)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        with open(
            os.path.join(output_dir, "analysis_report.txt"), "w", encoding="utf-8"
        ) as f:
            f.write("=== –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–• –î–ò–°–ü–ï–¢–ß–ï–†–ê ===\n")
            f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n")
            f.write("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: Python Database Analyzer\n\n")

            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã zanaradka
            f.write("=== –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ ZANARADKA ===\n")
            zanaradka_data = analysis_data.get("zanaradka_analysis", {})
            structure = zanaradka_data.get("structure", {})

            if structure.get("detailed_structure"):
                f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {structure.get('row_count', 0)}\n")
                f.write("–ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã:\n")
                for field in structure["detailed_structure"]:
                    f.write(
                        f"  {field['COLUMN_NAME']}: {field['COLUMN_TYPE']} ({field['DATA_TYPE']})\n"
                    )
                f.write("\n")

            # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π
            f.write("=== –ê–ù–ê–õ–ò–ó –ó–ù–ê–ß–ï–ù–ò–ô –ü–û–õ–ï–ô ===\n")
            field_analysis = zanaradka_data.get("field_analysis", {})
            for field_name, values in field_analysis.items():
                f.write(f"\n{field_name.upper()}:\n")
                for value_info in values[:10]:  # Top 10 values
                    f.write(f"  {value_info['value']}: {value_info['count']} —Ä–∞–∑\n")

            # –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            f.write("\n=== –ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–• ===\n")
            sample_data = zanaradka_data.get("sample_data", [])
            for i, record in enumerate(sample_data[:3]):
                f.write(f"\n–ó–∞–ø–∏—Å—å {i + 1}:\n")
                for key, value in record.items():
                    f.write(f"  {key}: {value}\n")

            # –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π
            f.write("\n=== –ö–ê–†–¢–ê –ü–û–õ–ï–ô ===\n")
            field_mapping = analysis_data.get("field_mapping", {})
            mapping = field_mapping.get("field_mapping", {})
            f.write("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö -> –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n")
            for db_field, web_field in mapping.items():
                f.write(f"  {db_field} -> {web_field}\n")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            f.write("\n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ ===\n")
            recommendations = analysis_data.get("recommendations", [])
            for i, rec in enumerate(recommendations, 1):
                f.write(f"{i}. {rec}\n")

        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_dir}/")

    def run_full_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞...")
        print("=" * 60)

        if not self.connect():
            return False

        try:
            # –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            zanaradka_analysis = self.analyze_zanaradka_table()

            # –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            related_tables_analysis = self.analyze_related_tables()

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π
            field_mapping = self.create_field_mapping()

            # –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            full_analysis = {
                "timestamp": datetime.now().isoformat(),
                "database_info": {
                    "host": self.config["host"],
                    "database": self.config["database"],
                    "connection_status": "success",
                },
                "zanaradka_analysis": zanaradka_analysis,
                "related_tables_analysis": related_tables_analysis,
                "field_mapping": field_mapping,
                "recommendations": self.generate_improvement_recommendations(
                    zanaradka_analysis
                ),
            }

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.save_analysis_results(full_analysis)

            print("=" * 60)
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'python_db_analysis'")
            print("üìä –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏:")
            print("   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã zanaradka –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            print("   - –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π —Å–æ–∑–¥–∞–Ω–∞")
            print("   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã")

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return False

        finally:
            self.disconnect()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç Enhanced Database Analysis Tool")
    print("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import importlib.util

        if importlib.util.find_spec("mysql.connector") is None:
            raise ImportError("mysql-connector-python not found")
    except ImportError:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å mysql-connector-python")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: pip install mysql-connector-python")
        return False

    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    analyzer = DatabaseAnalyzer()
    success = analyzer.run_full_analysis()

    if success:
        print(
            "\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É 'python_db_analysis' –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        )
    else:
        print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    return success


if __name__ == "__main__":
    main()
