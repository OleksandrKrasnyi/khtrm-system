# üöö KHTRM System - Kharkiv Transport Resource Management

## üöÄ Project Launch Commands

### Backend Server:
```bash
uv run uvicorn backend.app.main:app --reload
```

### Frontend Server (Vue 3 + Vite):
```bash
npm run dev
```

### Access URLs:
- **Frontend Application**: http://localhost:3000
- **Backend API**: http://localhost:8000
- **API Documentation**: http://localhost:8000/docs
- **Health Check**: http://localhost:8000/health

## üèóÔ∏è Architecture Status

### ‚úÖ Modern Vue 3 Composables Architecture (10/10)
- **Role-based Access Control**: 9 user roles with granular permissions
- **Vue 3 Composition API**: Modern composables-based architecture
- **FastAPI Backend**: High-performance Python web framework
- **MySQL/SQLite Support**: Flexible database configuration
- **Ukrainian UI**: User-friendly Ukrainian language interface
- **Clean Code**: Ruff, ESLint, and Prettier configured

### ‚úÖ Implemented Core Features
- **User Management**: Users and roles with permissions system
- **Authentication**: JWT-based secure authentication
- **Database Models**: User, UserRole with proper relationships
- **API Validation**: Pydantic schemas with Ukrainian error messages
- **Modern Frontend**: Vue 3 + Vue Router 4 + Pinia + TypeScript support
- **Development Tools**: Hot reload, code quality tools, testing setup

### üîê User Roles System
- **Super Admin** (–°—É–ø–µ—Ä –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä): Full system access
- **Dispatcher** (–ù–∞—Ä—è–¥—á–∏–∫): Create transport assignments
- **Timekeeper** (–¢–∞–±–µ–ª—å—â–∏–∫): Record incidents and work hours
- **Parking Manager** (–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–æ—è–Ω–∫–∏): Manage vehicle parking/return
- **Fuel Manager** (–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–ª–∏–≤–∞): Handle fuel operations
- **Mechanic** (–ú–µ—Ö–∞–Ω—ñ–∫): Maintenance operations (planned)
- **Driver** (–í–æ–¥—ñ–π): Driver interface (planned)
- **Inspector** (–Ü–Ω—Å–ø–µ–∫—Ç–æ—Ä): Quality control (planned)
- **Analyst** (–ê–Ω–∞–ª—ñ—Ç–∏–∫): Reports and analytics (planned)

## üîß Code Quality Tools

### Python (Backend) - Ruff Linting
```bash
# Check code quality
uv run ruff check

# Auto-fix issues
uv run ruff check --fix

# Format code
uv run ruff format

# Statistics
uv run ruff check --statistics

# Type checking
uv run mypy backend/

# Run tests
uv run pytest

# Comprehensive check (script - when created)
python scripts/python-check.py

# Auto-fix script (when created)
python scripts/python-fix.py
```

### JavaScript (Frontend) - ESLint + Prettier
```bash
# Check code quality
npm run lint

# Auto-fix issues
npm run lint -- --fix

# Format code
npm run format

# Check formatting
npm run format:check

# Type checking
npm run type-check

# Run tests
npm run test

# Comprehensive check
npm run check:all

# Fix all issues
npm run fix:all
```

## üìä Project Status

### ‚úÖ Completed:
- **Project Structure**: Backend and frontend folders with proper organization
- **Configuration**: Environment variables, database setup, CORS
- **User Models**: Complete user and role system with permissions
- **Pydantic Schemas**: Validation with Ukrainian error messages
- **Vue 3 Setup**: Router, Pinia, composables architecture ready
- **Code Quality**: Ruff, ESLint, Prettier configured
- **Documentation**: README.md with architecture overview

### üîÑ In Progress:
- **Authentication Service**: JWT token generation and validation
- **API Routers**: Auth and user management endpoints
- **Vue Composables**: useAuth, useApi, useNotifications
- **Login Component**: User authentication interface
- **Dashboard**: Role-based interface components

### üìã Planned:
- **Vehicle Management**: Fleet tracking and maintenance
- **Assignment System**: Transport scheduling and dispatch
- **Incident Recording**: Event logging and timekeeper functions
- **Fuel Management**: Consumption tracking and optimization
- **Parking Operations**: Vehicle return and parking management
- **Reports & Analytics**: Data visualization and insights
- **Mobile Interface**: Responsive design for mobile devices

## üõ†Ô∏è Development Setup

### Prerequisites:
- Python 3.11+
- Node.js 18+
- uv (Python package manager)
- MySQL 8.0+ (optional, SQLite used by default)

### Installation:
```bash
# Clone repository
git clone <repository-url>
cd brm-system

# Install Python dependencies
uv sync

# Install JavaScript dependencies
npm install

# Set up environment (create .env from .env.example)
cp .env.example .env

# Initialize database
uv run python -c "from backend.app.database import init_db; init_db()"

# Create initial roles and admin user (when seeder is ready)
uv run python scripts/seed_initial_data.py
```

### Pre-commit Quality Check:
```bash
# Full quality check (when scripts are ready)
python scripts/python-check.py && npm run check:all
```

## üóÑÔ∏è Database Management

### SQLite (Development):
```bash
# Database file location: ./brm_system.db
# Automatically created on first run

# Reset database
uv run python -c "from backend.app.database import reset_db; reset_db()"
```

### MySQL (Production):
```bash
# Configure in .env file:
MYSQL_HOST=localhost
MYSQL_PORT=3306
MYSQL_USER=brm_user
MYSQL_PASSWORD=secure_password
MYSQL_DATABASE=brm_system

# Run migrations (when Alembic is set up)
uv run alembic upgrade head

# Create new migration
uv run alembic revision --autogenerate -m "Description"
```

## üß™ Testing

### Backend Tests:
```bash
# Run all tests
uv run pytest

# Run with coverage
uv run pytest --cov=backend --cov-report=html

# Run specific test file
uv run pytest tests/test_user_models.py
```

### Frontend Tests:
```bash
# Run unit tests
npm run test

# Run tests with UI
npm run test:ui

# Run tests with coverage
npm run test:coverage
```

## üì¶ Production Deployment

### Build Frontend:
```bash
npm run build
```

### Run Production Server:
```bash
# With uv
uv run uvicorn backend.app.main:app --host 0.0.0.0 --port 8000

# With Docker (when Dockerfile is ready)
docker-compose up -d
```

### Windows Server 2022 Deployment:
1. Install Python 3.11+
2. Install Node.js 18+
3. Install MySQL 8.0+
4. Clone repository
5. Set up environment variables
6. Run installation commands
7. Configure IIS or use uvicorn directly
8. Set up SSL certificates

## üéØ Key Features Overview

### üîê Authentication & Authorization:
- JWT-based authentication
- Role-based access control
- Permission-based route protection
- Secure password hashing with bcrypt

### üë• User Management:
- Multiple user roles with specific permissions
- User profile management
- Employee ID and department tracking
- Activity logging and login statistics

### üöõ Transport Management (Planned):
- Vehicle fleet tracking
- Driver assignment and scheduling
- Route planning and optimization
- Maintenance scheduling

### ‚õΩ Resource Management (Planned):
- Fuel consumption tracking
- Parking space management
- Incident reporting and logging
- Performance analytics

### üìä Reporting & Analytics (Planned):
- Real-time dashboards
- Custom report generation
- Data export capabilities
- Performance metrics

## üé® Frontend Components Structure

### Vue 3 Composables:
- **useAuth**: Authentication state and methods
- **useApi**: HTTP client with error handling
- **useNotifications**: Toast notifications system
- **usePermissions**: Role and permission checking
- **useRouter**: Navigation with guards

### Planned Components:
- **LoginForm**: User authentication
- **Dashboard**: Role-based main interface
- **UserManagement**: Admin user control
- **VehicleManagement**: Fleet operations
- **AssignmentManagement**: Transport scheduling
- **IncidentManagement**: Event logging
- **ParkingManagement**: Vehicle parking
- **FuelManagement**: Fuel operations
- **ReportsView**: Analytics dashboard
- **SystemSettings**: Configuration panel

## üîí Security Features

- **JWT Authentication**: Secure token-based auth
- **Password Hashing**: Bcrypt protection
- **Input Validation**: Pydantic schema validation
- **CORS Configuration**: Proper cross-origin settings
- **SQL Injection Protection**: SQLAlchemy ORM
- **Role-based Access**: Granular permission system
- **Ukrainian Error Messages**: User-friendly validation

## üì± UI/UX Features

- **Responsive Design**: Mobile-friendly interface
- **Ukrainian Localization**: Native language support
- **Modern Styling**: Clean, professional appearance
- **Dark/Light Theme**: User preference support (planned)
- **Accessibility**: WCAG compliance (planned)
- **Progressive Web App**: Offline capability (planned)

## üìù Development Notes

### Architecture Principles:
- **Clean Architecture**: Separation of concerns
- **SOLID Principles**: Maintainable code structure
- **DRY (Don't Repeat Yourself)**: Code reusability
- **Single Responsibility**: Clear component purposes
- **Dependency Injection**: Testable components

### Code Standards:
- **Python**: PEP 8 compliance with Ruff
- **JavaScript**: ESLint + Prettier formatting
- **Vue**: Composition API best practices
- **TypeScript**: Strict type checking (planned)
- **Documentation**: English docs, Ukrainian UI

### Performance Optimizations:
- **Lazy Loading**: Route-based code splitting
- **Caching**: API response caching
- **Pagination**: Large dataset handling
- **Compression**: Gzip response compression
- **CDN Ready**: Static asset optimization

## üöÄ Quick Start Checklist

1. ‚úÖ Install dependencies: `uv sync && npm install`
2. ‚úÖ Set up environment: Copy `.env.example` to `.env`
3. ‚è≥ Start backend: `uv run uvicorn backend.app.main:app --reload`
4. ‚è≥ Start frontend: `npm run dev`
5. ‚è≥ Create admin user (when seeder is ready)
6. ‚è≥ Access application at http://localhost:3000

## üéØ Next Steps

1. **Complete Authentication System**: JWT service and API routes
2. **Create Login Interface**: Vue components for user auth
3. **Implement Role-based Dashboard**: Different UI for each role
4. **Set up Database Migrations**: Alembic configuration
5. **Add Vehicle Management**: Fleet tracking features
6. **Develop Assignment System**: Transport scheduling
7. **Create Mobile Interface**: Responsive design
8. **Add Real-time Features**: WebSocket integration
9. **Implement Analytics**: Reporting dashboard
10. **Deploy to Production**: Windows Server setup

---

**üéâ BRM System is architecturally ready for rapid development and production deployment!** 